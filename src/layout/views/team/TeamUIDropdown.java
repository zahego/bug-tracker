/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package layout.views.team;

import common.Team.Userhold;
import layout.views.project.ProjectUIDropdown;
import common.Project.Projecthold;
import layout.views.screen.ScreenUI;
import layout.views.setting.SettingUI;
import common.User.CurrentUserhold;
import layout.views.user.UserUICreateUpdate;

/**
 *
 * @author tug70
 */
public class TeamUIDropdown extends javax.swing.JPanel {

    /**
     * Creates new form UserUIDropdown
     */
    public TeamUIDropdown() {
        initComponents();
        Userhold.populateUserhold();
        this.renderUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        teamDropdown = new javax.swing.JComboBox<>();

        teamDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--all teammate--", " " }));
        teamDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamDropdownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(teamDropdown, 0, 142, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(teamDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void teamDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamDropdownActionPerformed

        Object selected = this.teamDropdown.getSelectedItem();
        if (selected == "--all teammate--") {
            //ProjectUIDropdown.setProjectAccessID(-1);

        } else if (selected == "+ Add teammate") {
            //adding new user
            UserUICreateUpdate create = new UserUICreateUpdate();
            //create new int ID that is the next highest number according to the last item in user size()
            int ID = Userhold.getUsers().get(Userhold.getUsers().size() - 1).getID() + 1;
            create.setIDint(ID);
            create.getDeleteButton().setVisible(false);

            create.setCreateUpdateLabel("Create User");
            create.setSubmitButton("Create");
            create.setVisible(true);
            //reredner user
            ScreenUI.getUserUI().renderUI();
        } else {
            //updating existed user
            for (int i = 0; i < Userhold.getUsers().size(); i++) {
                //System.out.println(Userhold.getUsers().get(i).getName());
                //System.out.println(selected);
                if (Userhold.getUsers().get(i).getName().equals(selected)) {
                    //check access range to see if user are allow to edit team--only PM and higher should do this
                    if (CurrentUserhold.getUser().getAccessRange() > 2) {
                        //check if in setting this is changed to true to prevent annoyance
                        if (SettingUI.isTeamEditToggle() == true) {
                            UserUICreateUpdate update = new UserUICreateUpdate();
                            update.setUpdateInformation(Userhold.getUsers().get(i));
                            update.setCreateUpdateLabel("Update User");
                            update.setSubmitButton("Update");
                            update.setVisible(true);

                        }
                    }
                    //for every one, not limited to access range
                    if (SettingUI.isSendEmailToggle() == true) {
                        //this is to make it so that only 1 pop up will appear
                        if(!SettingUI.isTeamEditToggle() == true){
                        String toEmail = Userhold.searchName(selected.toString());
                        if (!toEmail.isEmpty()) {
                            SendEmailUI sendEmail = new SendEmailUI();
                            sendEmail.setFromString(CurrentUserhold.getUser().getEmail());
                            sendEmail.setToString(toEmail);
                            sendEmail.setVisible(true);
                        }
                        }
                    }
                    //reredner sprint
                    ScreenUI.getUserUI().renderUI();
                    break;
                }
            }

        }
    }//GEN-LAST:event_teamDropdownActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> teamDropdown;
    // End of variables declaration//GEN-END:variables
    //work for both add and update. Method will rerender
    public void renderUI() {
        teamDropdown.removeAllItems();
        this.teamDropdown.addItem("--all teammate--");
        int projectID = ProjectUIDropdown.getProjectAccessID();

        for (int i = 0; i < Userhold.getUsers().size(); i++) {
            //all projecti chosen. All team member will be displayed
            if (projectID == -1) {
                this.teamDropdown.addItem(Userhold.getUsers().get(i).getName());
                //dispaly team member based on project
            } else {
                for (int j = 0; j < Projecthold.getProjects().get(projectID - 1).getTeam().size(); j++) {
                    //condition to render only team member that the user have access to for the project
                    if (Projecthold.getProjects().get(projectID - 1).getTeam().get(j) == Userhold.getUsers().get(i).getID()) {
                        this.teamDropdown.addItem(Userhold.getUsers().get(i).getName());
                    }
                }
            }
        }
        //only admin should do this
        if (CurrentUserhold.getUser() != null) {
            if (CurrentUserhold.getUser().getAccessRange() > 3) {
                this.teamDropdown.addItem("+ Add teammate");
            }
        }
    }
}
